geom_line(size = 2, color = 'blue')
AirPassengers
as.numeric(AirPassengers)
typeof(AirPassengers)
as.numeric(AirPassengers)
library(shiny); runApp('C:/Users/Andrey/Desktop/201/sp19/sp19-lecture-demos/01-shiny-review/01-simple-example.R')
runApp('C:/Users/Andrey/Desktop/201/sp19/sp19-lecture-demos/01-shiny-review/01-simple-example.R')
runApp('C:/Users/Andrey/Desktop/201/sp19/sp19-lecture-demos/02-layout-demos/01-layout-none.R')
runApp('C:/Users/Andrey/Desktop/201/sp19/sp19-lecture-demos/02-layout-demos/02-layout-sidebar.R')
runApp('C:/Users/Andrey/Desktop/201/sp19/sp19-lecture-demos/02-layout-demos/03-layout-columns.R')
test <- function() {
x <- 1
}
test_var <- test()
test()
View(Titanic)
?Titanic
system("ping https://google.com")
system("ping https://google.com")
system("ping https://www.google.com")
system("ping google.com")
4:400
?seq
seq(4, 400, 4)
seq(0, 10, 10)
seq(10, 100, 10)
ta_names <- c(
"Sarah", "Jeeyoung", "Kiran", "Alessandro", "Benji", "Vineeth", "Andrey", "Yash"
)
ta_names[0]
ta_names[1:3]
ta_names[ta_names == "Andrey"]
ta_names <- c(
"Sarah", "Jeeyoung", "Kiran", "Alessandro", "Benji", "Vineeth", "Andrey", "Yash"
)
str_contains(ta_names, "a")
grepl(ta_names, "a")
stringr::str_contains(ta_names, 'a')
stringr::str_contains(ta_names, 'a')
stringr::str_count(ta_names, 'a')
stringr::str_count(ta_names, 'aA')
stringr::str_count(ta_names, '[Aa]')
stringr::str_count(ta_names, 'a')
stringr::str_count(ta_names, 'a')
ta_names[stringr::str_count(ta_names, 'a') > 0]
andrey_profile <- list(
name = "Andrey Butenko",
courses = c("INFO 330", "CSE 374", "CSE 415", "GEN ST 297 Y"),
alive = TRUE,
age = 20
)
andrey_profile$name
andrey_profile[["age"]]
key <- "age"
andrey_profile[[key]]
?norm
??norm
??normal
titanic <- as.data.frame(Titanic, stringsAsFactors=FALSE)
survival_rate <- function(ticket_class) {
## compute survival rate for the given ticket class ('1st', '2nd', '3rd', 'Crew')
##
##Takes the dataframe then limits it to the class, given by the user
class_list <- titanic[titanic$Class == ticket_class,]
##The break up of the class list into adult males, and women and children
male_adult <- subset(class_list, class_list$Age == "Adult" & class_list$Sex == "Male")
women_Children <- subset(class_list, !(class_list$Age == "Adult" & class_list$Sex == "Male"))
##The total amount of people within both groups
male_adult_sum <- sum(male_adult$Freq)
women_Children_sum <- sum(women_Children$Freq)
##The amount of people who survived within the group
male_adult_survived <- sum(male_adult[male_adult$Survived == "Yes",]["Freq"])
women_Children_survived <- sum(women_Children[women_Children$Survived =="Yes",]["Freq"])
##The survival percentage of adult men, and women and children
survival_rate_men = round((male_adult_survived / male_adult_sum)*100)
survival_rate_women = round((women_Children_survived / women_Children_sum)*100)
cat("In the ",ticket_class, " class, " ,survival_rate_women,
"% of women and children survived and " ,survival_rate_men, "% of men survived.\n",
sep="")
}
## Call your `survival_rate()` function on each of the ticketing classes (`Crew`, `1st`, `2nd`, and `3rd`)
survival_rate("Crew")
survival_rate("1st")
survival_rate("2nd")
survival_rate("3rd")
survival_rate <- function(ticket_class) {
## compute survival rate for the given ticket class ('1st', '2nd', '3rd', 'Crew')
##
##Takes the dataframe then limits it to the class, given by the user
class_list <- titanic[titanic$Class == ticket_class,]
##The break up of the class list into adult males, and women and children
male_adult <- subset(class_list, class_list$Age == "Adult" & class_list$Sex == "Male")
women_Children <- subset(class_list, !(class_list$Age == "Adult" & class_list$Sex == "Male"))
##The total amount of people within both groups
male_adult_sum <- sum(male_adult$Freq)
women_Children_sum <- sum(women_Children$Freq)
##The amount of people who survived within the group
male_adult_survived <- sum(male_adult[male_adult$Survived == "Yes",]["Freq"])
women_Children_survived <- sum(women_Children[women_Children$Survived =="Yes",]["Freq"])
##The survival percentage of adult men, and women and children
survival_rate_men = round((male_adult_survived / male_adult_sum)*100)
survival_rate_women = round((women_Children_survived / women_Children_sum)*100)
cat(male_adult)
cat("In the ",ticket_class, " class, " ,survival_rate_women,
"% of women and children survived and " ,survival_rate_men, "% of men survived.\n",
sep="")
}
survival_rate("Crew")
survival_rate <- function(ticket_class) {
## compute survival rate for the given ticket class ('1st', '2nd', '3rd', 'Crew')
##
##Takes the dataframe then limits it to the class, given by the user
class_list <- titanic[titanic$Class == ticket_class,]
##The break up of the class list into adult males, and women and children
male_adult <- subset(class_list, class_list$Age == "Adult" & class_list$Sex == "Male")
women_Children <- subset(class_list, !(class_list$Age == "Adult" & class_list$Sex == "Male"))
##The total amount of people within both groups
male_adult_sum <- sum(male_adult$Freq)
women_Children_sum <- sum(women_Children$Freq)
##The amount of people who survived within the group
male_adult_survived <- sum(male_adult[male_adult$Survived == "Yes",]["Freq"])
women_Children_survived <- sum(women_Children[women_Children$Survived =="Yes",]["Freq"])
##The survival percentage of adult men, and women and children
survival_rate_men = round((male_adult_survived / male_adult_sum)*100)
survival_rate_women = round((women_Children_survived / women_Children_sum)*100)
cat(len(male_adult))
cat("In the ",ticket_class, " class, " ,survival_rate_women,
"% of women and children survived and " ,survival_rate_men, "% of men survived.\n",
sep="")
}
survival_rate("Crew")
survival_rate <- function(ticket_class) {
## compute survival rate for the given ticket class ('1st', '2nd', '3rd', 'Crew')
##
##Takes the dataframe then limits it to the class, given by the user
class_list <- titanic[titanic$Class == ticket_class,]
##The break up of the class list into adult males, and women and children
male_adult <- subset(class_list, class_list$Age == "Adult" & class_list$Sex == "Male")
women_Children <- subset(class_list, !(class_list$Age == "Adult" & class_list$Sex == "Male"))
##The total amount of people within both groups
male_adult_sum <- sum(male_adult$Freq)
women_Children_sum <- sum(women_Children$Freq)
##The amount of people who survived within the group
male_adult_survived <- sum(male_adult[male_adult$Survived == "Yes",]["Freq"])
women_Children_survived <- sum(women_Children[women_Children$Survived =="Yes",]["Freq"])
##The survival percentage of adult men, and women and children
survival_rate_men = round((male_adult_survived / male_adult_sum)*100)
survival_rate_women = round((women_Children_survived / women_Children_sum)*100)
cat(length(male_adult))
cat("In the ",ticket_class, " class, " ,survival_rate_women,
"% of women and children survived and " ,survival_rate_men, "% of men survived.\n",
sep="")
}
survival_rate("Crew")
survival_rate <- function(ticket_class) {
## compute survival rate for the given ticket class ('1st', '2nd', '3rd', 'Crew')
##
##Takes the dataframe then limits it to the class, given by the user
class_list <- titanic[titanic$Class == ticket_class,]
##The break up of the class list into adult males, and women and children
male_adult <- subset(class_list, class_list$Age == "Adult" & class_list$Sex == "Male")
women_Children <- subset(class_list, !(class_list$Age == "Adult" & class_list$Sex == "Male"))
##The total amount of people within both groups
male_adult_sum <- sum(male_adult$Freq)
women_Children_sum <- sum(women_Children$Freq)
##The amount of people who survived within the group
male_adult_survived <- sum(male_adult[male_adult$Survived == "Yes",]["Freq"])
women_Children_survived <- sum(women_Children[women_Children$Survived =="Yes",]["Freq"])
##The survival percentage of adult men, and women and children
survival_rate_men = round((male_adult_survived / male_adult_sum)*100)
survival_rate_women = round((women_Children_survived / women_Children_sum)*100)
cat('male_adult_survived ', male_adult_survived)
cat('male_adult_sum ', male_adult_sum)
cat('women_Children_survived ', male_adult_sum)
cat('women_Children_sum ', male_adult_sum)
cat("In the ",ticket_class, " class, " ,survival_rate_women,
"% of women and children survived and " ,survival_rate_men, "% of men survived.\n",
sep="")
}
survival_rate("Crew")
survival_rate <- function(ticket_class) {
## compute survival rate for the given ticket class ('1st', '2nd', '3rd', 'Crew')
##
##Takes the dataframe then limits it to the class, given by the user
class_list <- titanic[titanic$Class == ticket_class,]
##The break up of the class list into adult males, and women and children
male_adult <- subset(class_list, class_list$Age == "Adult" & class_list$Sex == "Male")
women_Children <- subset(class_list, !(class_list$Age == "Adult" & class_list$Sex == "Male"))
##The total amount of people within both groups
male_adult_sum <- sum(male_adult$Freq)
women_Children_sum <- sum(women_Children$Freq)
##The amount of people who survived within the group
male_adult_survived <- sum(male_adult[male_adult$Survived == "Yes",]["Freq"])
women_Children_survived <- sum(women_Children[women_Children$Survived =="Yes",]["Freq"])
##The survival percentage of adult men, and women and children
survival_rate_men = round((male_adult_survived / male_adult_sum)*100)
survival_rate_women = round((women_Children_survived / women_Children_sum)*100)
cat('male_adult_survived ', male_adult_survived, '\n')
cat('male_adult_sum ', male_adult_sum, '\n')
cat('women_Children_survived ', male_adult_sum, '\n')
cat('women_Children_sum ', male_adult_sum, '\n')
cat("In the ",ticket_class, " class, " ,survival_rate_women,
"% of women and children survived and " ,survival_rate_men, "% of men survived.\n",
sep="")
}
survival_rate("Crew")
survival_rate <- function(ticket_class) {
## compute survival rate for the given ticket class ('1st', '2nd', '3rd', 'Crew')
##
##Takes the dataframe then limits it to the class, given by the user
class_list <- titanic[titanic$Class == ticket_class,]
##The break up of the class list into adult males, and women and children
male_adult <- subset(class_list, class_list$Age == "Adult" & class_list$Sex == "Male")
women_Children <- subset(class_list, !(class_list$Age == "Adult" & class_list$Sex == "Male"))
##The total amount of people within both groups
male_adult_sum <- sum(male_adult$Freq)
women_Children_sum <- sum(women_Children$Freq)
##The amount of people who survived within the group
male_adult_survived <- sum(male_adult[male_adult$Survived == "Yes",]["Freq"])
women_Children_survived <- sum(women_Children[women_Children$Survived =="Yes",]["Freq"])
##The survival percentage of adult men, and women and children
survival_rate_men = round((male_adult_survived / male_adult_sum)*100)
survival_rate_women = round((women_Children_survived / women_Children_sum)*100)
cat('male_adult_survived ', male_adult_survived, '\n')
cat('male_adult_sum ', male_adult_sum, '\n')
cat('women_Children_survived ', women_Children_survived, '\n')
cat('women_Children_sum ', women_Children_sum, '\n')
cat("In the ",ticket_class, " class, " ,survival_rate_women,
"% of women and children survived and " ,survival_rate_men, "% of men survived.\n",
sep="")
}
survival_rate("Crew")
survival_rate <- function(ticket_class) {
## compute survival rate for the given ticket class ('1st', '2nd', '3rd', 'Crew')
##
##Takes the dataframe then limits it to the class, given by the user
class_list <- titanic[titanic$Class == ticket_class,]
##The break up of the class list into adult males, and women and children
male_adult <- subset(class_list, class_list$Age == "Adult" & class_list$Sex == "Male")
women_Children <- subset(class_list, !(class_list$Age == "Adult" & class_list$Sex == "Male"))
##The total amount of people within both groups
male_adult_sum <- sum(male_adult$Freq)
women_Children_sum <- sum(women_Children$Freq)
##The amount of people who survived within the group
male_adult_survived <- sum(male_adult[male_adult$Survived == "Yes",]["Freq"])
women_Children_survived <- sum(women_Children[women_Children$Survived =="Yes",]["Freq"])
##The survival percentage of adult men, and women and children
survival_rate_men = round((male_adult_survived / male_adult_sum)*100)
survival_rate_women = round((women_Children_survived / women_Children_sum)*100)
cat('male_adult_survived ', male_adult_survived, '\n')
cat('male_adult_sum ', male_adult_sum, '\n')
cat('survival_rate_men ', survival_rate_men, '\n')
cat('women_Children_survived ', women_Children_survived, '\n')
cat('women_Children_sum ', women_Children_sum, '\n')
cat('survival_rate_women ', survival_rate_women, '\n')
cat("In the ",ticket_class, " class, " ,survival_rate_women,
"% of women and children survived and " ,survival_rate_men, "% of men survived.\n",
sep="")
}
survival_rate("Crew")
titanic <- as.data.frame(Titanic, stringsAsFactors=FALSE)
survival_rate <- function(ticket_class) {
## compute survival rate for the given ticket class ('1st', '2nd', '3rd', 'Crew')
##
##Takes the dataframe then limits it to the class, given by the user
class_list <- titanic[titanic$Class == ticket_class,]
##The break up of the class list into adult males, and women and children
male_adult <- subset(class_list, class_list$Age == "Adult" & class_list$Sex == "Male")
women_Children <- subset(class_list, !(class_list$Age == "Adult" & class_list$Sex == "Male"))
##The total amount of people within both groups
male_adult_sum <- sum(male_adult$Freq)
women_Children_sum <- sum(women_Children$Freq)
##The amount of people who survived within the group
male_adult_survived <- sum(male_adult[male_adult$Survived == "Yes",]["Freq"])
women_Children_survived <- sum(women_Children[women_Children$Survived =="Yes",]["Freq"])
##The survival percentage of adult men, and women and children
survival_rate_men = round((male_adult_survived / male_adult_sum)*100)
survival_rate_women = round((women_Children_survived / women_Children_sum)*100)
cat('male_adult_survived ', male_adult_survived, '\n')
cat('male_adult_sum ', male_adult_sum, '\n')
cat('survival_rate_men ', survival_rate_men, '\n')
cat('women_Children_survived ', women_Children_survived, '\n')
cat('women_Children_sum ', women_Children_sum, '\n')
cat('survival_rate_women ', survival_rate_women, '\n')
cat("In the ",ticket_class, " class, " ,survival_rate_women,
"% of women and children survived and " ,survival_rate_men, "% of men survived.\n",
sep="")
}
## Call your `survival_rate()` function on each of the ticketing classes (`Crew`, `1st`, `2nd`, and `3rd`)
survival_rate("Crew")
survival_rate("1st")
survival_rate("2nd")
survival_rate("3rd")
get_col_mean <- function(column, df){
return(mean(df[column], na.rm = TRUE))
}
col_means <- lapply(colnames(life_exp)[-1], get_col_mean, life_exp)
life_exp <- data.frame(
countries = c('USA',  'CAN'),
val.1 = c(5, 1),
val.2 = c(21, 3)
)
col_means <- lapply(colnames(life_exp)[-1], get_col_mean, life_exp)
get_col_mean('val.1', life.exp)
get_col_mean('val.1', life_exp)
get_col_mean <- function(column, df){
return(mean(df[, column]))
}
get_col_mean('val.1', life_exp)
col_means <- lapply(colnames(life_exp)[-1], get_col_mean, life_exp)
col_means
rlang
get_average <- function(df, column) {
df %>%
summarize(mean = mean({{ column }}))
}
library(dplyr)
animals <- data.frame(
name = c('Koalas', 'Kangaroos', 'Spiders'),
legs = c(4, 2, 8),
eyes = c(2, 2, 8)
)
get_average(animalls, legs)
get_average(animals, legs)
get_average(animals, 'legs')
install.packages('dplyr')
install.packages("dplyr")
get_average <- function(df, column) {
df %>%
summarize(mean = mean({{ column }}))
}
get_average(animals, 'legs')
library(dplyr)
get_average(animals, 'legs')
get_average <- function(df, column) {
df %>%
summarize(mean = mean(!!as.sym(column)))
}
get_average(animals, 'legs')
get_average <- function(df, column) {
df %>%
summarize(mean = mean(!!as.name(column)))
}
get_average(animals, 'legs')
filter_to <- function(df, column, value) {
df %>%
filter(!!as.name(column) == value)
}
filter_to(animals, 'legs', 4)
filter_to(animals, 'legs', 2)
filter_to(animals, 'eyes', 2)
sapply(columns_to_try, filter_to, 2)
columns_to_try <- c('legs', 'eyes')
sapply(columns_to_try, filter_to, 2)
filter_to <- function(column, df, value) {
df %>%
filter(!!as.name(column) == value)
}
filter_to('legs', animals, 2)
filter_to('eyes', animals, 2)
columns_to_try <- c('legs', 'eyes')
sapply(columns_to_try, filter_to, 2)
sapply(columns_to_try, filter_to, animals, 2)
lapply(columns_to_try, filter_to, animals, 2)
state
state.name
state.area
df <- data.frame(
state = state.name,
area = state.area
)
library(dplyr)
df <- data.frame(
state = state.name,
area = state.area
)
mutate(df, state = tolower(state))
my_age <- 20
my_name <- "Andrey"
24 * 2
my_age <- 20
my_name <- "Andrey"
print(my_name)
24 x 2
24 * 2
setwd("~/474/d3-australian-wildfires-over-time/data")
library(dplyr)
library(jsonlite)
data <- read.csv('fire_nrt_M6_96619.csv', stringsAsFactors = FALSE) %>%
select(latitude, longitude, acq_date, brightness) %>%
mutate(acq_date = as.Date(acq_date, "%Y-%m-%d")) %>%
filter(acq_date > as.Date('2019-11-01', '%Y-%m-%d'))
for(date in unique(data$acq_date)) {
results[[date]] <- data %>%
filter(acq_date == date) %>%
select(latitude, longitude, brightness)
}
export <- toJSON(results)
data <- read.csv('fire_nrt_M6_96619.csv', stringsAsFactors = FALSE) %>%
select(latitude, longitude, acq_date, brightness) %>%
mutate(acq_date = as.Date(acq_date, "%Y-%m-%d")) %>%
filter(acq_date > as.Date('2019-11-01', '%Y-%m-%d'))
for(date in unique(data$acq_date)) {
results[[date]] <- data %>%
filter(acq_date == date) %>%
select(latitude, longitude, brightness)
}
results <- list()
for(date in unique(data$acq_date)) {
results[[date]] <- data %>%
filter(acq_date == date) %>%
select(latitude, longitude, brightness)
}
export <- toJSON(results)
names(results)
data <- read.csv('fire_nrt_M6_96619.csv', stringsAsFactors = FALSE) %>%
select(latitude, longitude, acq_date, brightness) %>%
mutate(acq_date = as.Date(acq_date, "%Y-%m-%d")) %>%
filter(acq_date > as.Date('2019-11-01', '%Y-%m-%d')) %>%
mutate(acq_date = as.character(acq_date))
results <- list()
for(date in unique(data$acq_date)) {
results[[date]] <- data %>%
filter(acq_date == date) %>%
select(latitude, longitude, brightness)
}
export <- toJSON(results)
write(export, 'data.json')
View(data)
data <- read.csv('fire_nrt_M6_96619.csv', stringsAsFactors = FALSE) %>%
select(latitude, longitude, acq_date, brightness) # %>%
# mutate(acq_date = as.Date(acq_date, "%Y-%m-%d")) %>%
# filter(acq_date > as.Date('2019-11-01', '%Y-%m-%d')) %>%
# mutate(acq_date = as.character(acq_date))
results <- list()
for(date in unique(data$acq_date)) {
results[[date]] <- data %>%
filter(acq_date == date) %>%
select(latitude, longitude, brightness)
}
export <- toJSON(results)
write(export, 'data.json')
raw_data <- read.csv('fire_nrt_M6_96619.csv', stringsAsFactors = FALSE)
View(raw_data)
raw_data <- read.csv('fire_nrt_M6_96619.csv', stringsAsFactors = FALSE)
data <- raw_data %>%
select(latitude, longitude, acq_date, brightness, frp) # %>%
# mutate(acq_date = as.Date(acq_date, "%Y-%m-%d")) %>%
# filter(acq_date > as.Date('2019-11-01', '%Y-%m-%d')) %>%
# mutate(acq_date = as.character(acq_date))
results <- list()
for(date in unique(data$acq_date)) {
results[[date]] <- data %>%
filter(acq_date == date) %>%
select(latitude, longitude, brightness, frp)
}
export <- toJSON(results)
write(export, 'data.json')
hist(raw_data$frp, raw_data$brightness)
ggplot2::ggplot(raw_data) + geom_scatter(aes(brightness, frp))
ggplot2::ggplot(raw_data) + geom_point(aes(brightness, frp))
ggplot2::ggplot(raw_data) + ggplot2::geom_point(aes(brightness, frp))
library(ggplot2)
ggplot2::ggplot(raw_data) + ggplot2::geom_point(aes(brightness, frp))
ggplot(raw_data) + geom_point(aes(brightness, frp))
data <- raw_data %>%
select(latitude, longitude, acq_date, brightness, frp) # %>%
# mutate(acq_date = as.Date(acq_date, "%Y-%m-%d")) %>%
# filter(acq_date > as.Date('2019-11-01', '%Y-%m-%d')) %>%
# mutate(acq_date = as.character(acq_date))
results <- list()
for(date in unique(data$acq_date)) {
results[[date]] <- data %>%
filter(acq_date == date) %>%
select(latitude, longitude, brightness, frp) %>%
arrange(-brightness)
}
export <- toJSON(results)
write(export, 'data.json')
raw_data <- read.csv('fire_nrt_M6_96619.csv', stringsAsFactors = FALSE)
data <- raw_data %>%
select(latitude, longitude, acq_date, brightness, frp) # %>%
# mutate(acq_date = as.Date(acq_date, "%Y-%m-%d")) %>%
# filter(acq_date > as.Date('2019-11-01', '%Y-%m-%d')) %>%
# mutate(acq_date = as.character(acq_date))
results <- list()
for(date in unique(data$acq_date)) {
results[[date]] <- data %>%
filter(acq_date == date) %>%
select(latitude, longitude, brightness, frp) %>%
arrange(brightness)
}
export <- toJSON(results)
write(export, 'data.json')
data <- raw_data %>%
select(latitude, longitude, acq_date, brightness, frp, satellite, daynight) # %>%
# mutate(acq_date = as.Date(acq_date, "%Y-%m-%d")) %>%
# filter(acq_date > as.Date('2019-11-01', '%Y-%m-%d')) %>%
# mutate(acq_date = as.character(acq_date))
results <- list()
for(date in unique(data$acq_date)) {
results[[date]] <- data %>%
filter(acq_date == date) %>%
select(-acq_date) %>%
arrange(brightness)
}
export <- toJSON(results)
write(export, 'data.json')
results[[date]] <- data %>%
filter(acq_date == date) %>%
select(-acq_date) %>%
arrange(brightness)
